//
// Generated file, do not edit! Created by nedtool 5.2 from DestMessage.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __NFV_FATTREE_DESTMESSAGE_M_H
#define __NFV_FATTREE_DESTMESSAGE_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0502
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace nfv_fattree {

/**
 * Class generated from <tt>DestMessage.msg:18</tt> by nedtool.
 * <pre>
 * message DestMessage
 * {
 *     int destination;
 *     int hopCount = 0;
 *     int vnfCount = 0;
 * 
 *     simtime_t produced;
 *     simtime_t queued;
 * }
 * </pre>
 */
class DestMessage : public ::omnetpp::cMessage
{
  protected:
    int destination;
    int hopCount;
    int vnfCount;
    ::omnetpp::simtime_t produced;
    ::omnetpp::simtime_t queued;

  private:
    void copy(const DestMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DestMessage&);

  public:
    DestMessage(const char *name=nullptr, short kind=0);
    DestMessage(const DestMessage& other);
    virtual ~DestMessage();
    DestMessage& operator=(const DestMessage& other);
    virtual DestMessage *dup() const override {return new DestMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getDestination() const;
    virtual void setDestination(int destination);
    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);
    virtual int getVnfCount() const;
    virtual void setVnfCount(int vnfCount);
    virtual ::omnetpp::simtime_t getProduced() const;
    virtual void setProduced(::omnetpp::simtime_t produced);
    virtual ::omnetpp::simtime_t getQueued() const;
    virtual void setQueued(::omnetpp::simtime_t queued);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DestMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DestMessage& obj) {obj.parsimUnpack(b);}

} // namespace nfv_fattree

#endif // ifndef __NFV_FATTREE_DESTMESSAGE_M_H

